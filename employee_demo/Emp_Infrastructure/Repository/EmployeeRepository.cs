using Emp_Core;
using Emp_Infrastructure.context;
using Emp_Infrastructure.Interfaces;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Emp_Infrastructure.Repository
{
    public class EmployeeRepository : IEmployeeRepository
    {
        private readonly EmployeeDbContext _context;

        public EmployeeRepository(EmployeeDbContext context)
        {
            _context = context;

        }

        #region
        //public async Task<int> Add(Employee employee)
        //{
        //    await _context.Employees.AddAsync(employee);

        //    // Save changes to get the EmployeeId generated by the database
        //    await _context.SaveChangesAsync();

        //    // Assign the generated EmployeeId to the Address and EmergencyContact entities
        //    foreach (var address in employee.Addresses)
        //    {
        //        address.EmpId = employee.Id;
        //        _context.Addresses.Add(address);
        //    }

        //    foreach (var emergencyContact in employee.EmergencyContacts)
        //    {
        //        emergencyContact.EmployeeId = employee.Id;
        //        _context.EmergencyContacts.Add(emergencyContact);
        //    }

        //    // Save changes to insert Address and EmergencyContact entities
        //    await _context.SaveChangesAsync();

        //    return employee.Id;
        //}
        #endregion
        public async Task<int> Add(Employee employee)
        {
            // Generate a unique number 
            int nextNumber = await _context.Employees.MaxAsync(e => e.Number) + 1;
            employee.Number = nextNumber;

            await _context.Employees.AddAsync(employee);
            await _context.SaveChangesAsync();
            return employee.Id;
        }

        public async Task<bool> Delete(int id)
        {
            bool isDeleted;
            try
            {

                Employee employee = await _context.Employees
             .Include(e => e.Addresses).Include(ec => ec.EmergencyContacts)   // Include related addresses and EmergencyContact
             .FirstOrDefaultAsync(x => x.Id == id);

                if (employee != null)
                {
                    _context.Addresses.RemoveRange(employee.Addresses);
                    _context.EmergencyContacts.RemoveRange(employee.EmergencyContacts);
                    _context.Employees.Remove(employee);
                    await _context.SaveChangesAsync();
                    isDeleted = true;
                }
                else
                {
                    isDeleted = false;
                }
            }
            catch
            {
                isDeleted = false;
            }
            return isDeleted;

        }

        public async Task<IEnumerable<Employee>> GetAll()
        {
           return await _context.Employees.ToListAsync();
        }

        public async Task<Employee> GetById(int id)
        {
            var data = await _context.Employees.Include(a => a.Department).Include(a => a.Addresses).Include(ec => ec.EmergencyContacts).Where(x => x.Id == id).FirstOrDefaultAsync();
            return data;
        }

        public async Task<int> Update(Employee employee)
        {

            _context.Entry(employee).State = EntityState.Modified;


            foreach (var address in employee.Addresses)
            {
                _context.Entry(address).State = address.Id == 0 ? EntityState.Added : EntityState.Modified;
            }

            foreach (var emergencyContact in employee.EmergencyContacts)
            {
                _context.Entry(emergencyContact).State = emergencyContact.Id == 0 ? EntityState.Added : EntityState.Modified;
            }
           // _context.Employees.Update(employee);
            await _context.SaveChangesAsync();
            return employee.Id;
        }
    }
}
